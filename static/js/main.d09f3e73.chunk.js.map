{"version":3,"sources":["logo.svg","components/header/Header.jsx","api/api.js","actions/contactsActions.js","selectors/users-selectors.js","utils/setDateFormat.js","utils/setNationality.js","components/tableContacts/TableContacts.jsx","components/tableContacts/TableContactsContainer.jsx","components/statistic/Statistic.jsx","components/statistic/StatisticContainer.jsx","components/paginator/Paginator.jsx","components/paginator/PaginatorContainer.jsx","components/searchAndFilter/SearchAndFilter.jsx","components/searchAndFilter/SearchAndFilterContainer.jsx","components/tiledContacts/TiledContacts.jsx","components/tiledContacts/TiledContactsContainer.jsx","components/preloader/Preloader.jsx","pages/contacts/Contacts.jsx","pages/contacts/ContactsContainer.jsx","pages/home/Home.jsx","components/footer/Footer.jsx","App.js","serviceWorker.js","reducers/contactsReducer.js","reducers/index.js","store.js","index.js","assets/images/wezom-logo.svg","assets/images/react-logo.svg"],"names":["module","exports","Header","Grid","container","className","direction","justify","alignItems","src","WezomLogo","alt","to","exact","activeClassName","instance","Axios","create","baseURL","contactsApi","count","get","then","response","setFilterByName","text","type","setFilterByGender","setFilterByNationality","arrOfNationalities","setPage","page","clearAllFilters","setViewMode","viewMode","setIsUpdating","isUpdating","getViewMode","dispatch","a","localStorage","getItem","setItem","filterByNameSelector","createSelector","contactsReducer","users","filterByName","items","filterText","filterTextByName","toLowerCase","filter","item","name","title","first","last","includes","filterByGenderSelector","filterByGender","gender","genderFilter","filterByNationalitySelector","filterByNationality","nationality","length","i","value","nat","sort","sortBy","newItems","b","pagination","usersOnPage","currentPageUsersFrom","currentPageUsersTo","index","dateAmericanFormat","date","Date","toLocaleString","year","month","day","weekday","hour","minute","second","ageCounter","getTime","setNationality","nationLabel","TableContacts","setSortBy","copyToBufer","content","navigator","clipboard","writeText","Fragment","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableSortLabel","active","onClick","event","IconComponent","SwapCallsIcon","ArrowUpwardIcon","ArrowDownwardIcon","fontSize","TableBody","map","key","picture","thumbnail","dob","email","cell","location","country","street","number","city","state","postcode","connect","Statistic","countByNation","countByGender","spacing","all","males","females","indeterminate","zealander","swiss","irish","australian","canadian","brazilian","british","french","german","spanish","dutch","iranian","finnish","norwegian","american","danish","turkish","nationalities","forEach","Paginator","usersCount","pageCount","Math","ceil","Pagination","onChange","e","icon","checkedIcon","countries","SearchAndFilter","resetPage","md","xs","sm","TextField","id","label","variant","size","target","FormControl","InputLabel","htmlFor","Select","native","Autocomplete","multiple","options","disableCloseOnSelect","getOptionLabel","option","renderOption","selected","Checkbox","style","marginRight","checked","renderInput","params","disabled","viewBox","focusable","data-icon","width","height","fill","aria-hidden","d","TiledContacts","Card","CardActionArea","CardMedia","image","large","CardContent","Typography","gutterBottom","Divider","color","Preloader","CircularProgress","Contacts","setAndSaveViewMode","setUsersOnPage","getAllUsers","handleChangeViewMode","currentTarget","classList","contains","Button","ButtonGroup","SearchAndFilterContainer","TableContactsContainer","TiledContactsContainer","StatisticContainer","randomNumber","sessionStorage","floor","random","status","data","results","Error","console","error","useEffect","Home","logo","Footer","App","path","render","Boolean","window","hostname","match","initialState","action","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddlewear","ReactDOM","StrictMode","basename","process","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d09f3e73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import './header.scss';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport WezomLogo from '../../assets/images/wezom-logo.svg';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Grid container className='header'>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\">\r\n                <Grid container\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\">\r\n                    <Grid className='header__logo'>\r\n                        <img src={WezomLogo} alt=\"HotelLogo\" />\r\n                    </Grid>\r\n                    <Grid className='header__nav'>\r\n                        <ul>\r\n                            <li >\r\n                                <NavLink to='/' exact activeClassName=\"active\">Home</NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink to='/contacts' activeClassName=\"active\">Contacts</NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Header;","import Axios from \"axios\";\r\n\r\nconst instance = Axios.create(\r\n    {\r\n        baseURL: 'https://randomuser.me/api/1.3/'\r\n    }\r\n);\r\n\r\nexport const contactsApi = {\r\n    getMultipleUsers(count) {\r\n        return instance.get(`?results=${count}`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n}","import { contactsApi } from \"../api/api\";\r\n\r\nexport const SET_USERS = 'SET_USERS';\r\nexport const SET_FILTER_BY_NAME = 'SET_FILTER_BY_NAME';\r\nexport const SET_FILTER_BY_GENDER = 'SET_FILTER_BY_GENDER';\r\nexport const SET_FILTER_BY_NATIONALITY = 'SET_FILTER_BY_NATIONALITY';\r\nexport const SET_PAGE = 'SET_PAGE';\r\nexport const SET_USERS_ON_PAGE = 'SET_USERS_ON_PAGE';\r\nexport const SET_SORT_BY = 'SET_SORT_BY';\r\nexport const CLEAR_ALL_FILTER = 'CLEAR_ALL_FILTER';\r\nexport const SET_VIEW_MODE = 'SET_VIEW_MODE';\r\nexport const IS_UPDATING = 'IS_UPDATING';\r\n\r\nexport const setUsers = (users) => ({ type: SET_USERS, users });\r\nexport const setFilterByName = (text) => ({ type: SET_FILTER_BY_NAME, text });\r\nexport const setFilterByGender = (text) => ({ type: SET_FILTER_BY_GENDER, text });\r\nexport const setFilterByNationality = (arrOfNationalities) => ({ type: SET_FILTER_BY_NATIONALITY, arrOfNationalities });\r\nexport const setSortBy = (sortBy) => ({ type: SET_SORT_BY, sortBy });\r\nexport const setPage = (page) => ({ type: SET_PAGE, page });\r\nexport const setUsersOnPage = (usersOnPage) => ({ type: SET_USERS_ON_PAGE, usersOnPage });\r\nexport const clearAllFilters = () => ({ type: CLEAR_ALL_FILTER });\r\nexport const setViewMode = (viewMode) => ({ type: SET_VIEW_MODE, viewMode });\r\nexport const setIsUpdating = (isUpdating) => ({ type: IS_UPDATING, isUpdating });\r\n\r\nexport const getAllUsers = () => async (dispatch) => {\r\n    try {\r\n        dispatch(setIsUpdating(true))\r\n        dispatch(getViewMode());\r\n        let randomNumber = sessionStorage.getItem('usersCount');\r\n        if (!randomNumber) {\r\n            randomNumber = Math.floor(Math.random() * (1001 - 50) + 50);\r\n            sessionStorage.setItem('usersCount', randomNumber);\r\n        }\r\n        let response = await contactsApi.getMultipleUsers(randomNumber);\r\n\r\n        if (response.status === 200) {\r\n            dispatch(setUsers(response.data.results));\r\n            dispatch(setIsUpdating(false))\r\n        }\r\n        else throw (new Error())\r\n\r\n    } catch (err) {\r\n        console.error(\"Ошибка: \" + err);\r\n    }\r\n};\r\n\r\nexport const setAndSaveViewMode = (viewMode) => async (dispatch) => {\r\n    dispatch(setViewMode(viewMode))\r\n    localStorage.setItem('viewMode', viewMode);\r\n};\r\n\r\nconst getViewMode = () => async (dispatch) => {\r\n\r\n    let viewMode = localStorage.getItem('viewMode');\r\n    if (!viewMode) {\r\n        viewMode = 'table'\r\n        localStorage.setItem('viewMode', viewMode);\r\n    }\r\n    dispatch(setViewMode(viewMode))\r\n};","import { createSelector } from 'reselect';\r\n\r\nconst getUsers = contactsReducer => contactsReducer.users;\r\nconst getFilterByName = contactsReducer => contactsReducer.filterByName;\r\nconst getPage = contactsReducer => contactsReducer.page;\r\nconst getUsersOnPage = contactsReducer => contactsReducer.usersOnPage;\r\nconst filterByGender = contactsReducer => contactsReducer.filterByGender;\r\nconst filterByNationality = contactsReducer => contactsReducer.filterByNationality;\r\nconst getSortBy = contactsReducer => contactsReducer.sortBy;\r\n\r\nexport const filterByNameSelector = createSelector(getUsers, getFilterByName, (items, filterText) => {\r\n    if (items) {\r\n        let filterTextByName = filterText.toLowerCase();\r\n        return items.filter((item) => {\r\n            let fullName = item.name.title.toLowerCase() + '.' + ' ' + item.name.first.toLowerCase() + ' ' + item.name.last.toLowerCase();\r\n            if (fullName.includes(filterTextByName)) return item;\r\n        })\r\n    }\r\n});\r\n\r\nexport const filterByGenderSelector = createSelector(filterByNameSelector, filterByGender, (items, gender) => {\r\n    if (items) {\r\n        let genderFilter = gender.toLowerCase();\r\n        if (genderFilter === '') return items;\r\n        else {\r\n            return items.filter((item) => item.gender === genderFilter)\r\n        }\r\n\r\n    }\r\n});\r\n\r\nexport const filterByNationalitySelector = createSelector(filterByGenderSelector, filterByNationality, (items, nationality) => {\r\n    if (items) {\r\n        if (nationality.length === 0) return items;\r\n        else return items.filter((item) => {\r\n            for (let i = 0; i < nationality.length; i++) {\r\n                if (nationality[i].value == item.nat) return item;\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nexport const sort = createSelector(filterByNationalitySelector, getSortBy, (items, sortBy) => {\r\n    if (items) {\r\n        let newItems = [...items];\r\n        if (sortBy === 'none') return items;\r\n        if (sortBy === 'asc') {\r\n\r\n            newItems.sort((a, b) => {\r\n                // console.log(a.name.title.toLowerCase())\r\n                if (a.name.title.toLowerCase() < b.name.title.toLowerCase()) return -1;\r\n                if (a.name.title.toLowerCase() > b.name.title.toLowerCase()) return 1;\r\n                return 0;\r\n            })\r\n            return [...newItems]\r\n        }\r\n        if (sortBy === 'dec') {\r\n            newItems.sort((a, b) => {\r\n                if (a.name.title.toLowerCase() > b.name.title.toLowerCase()) return -1;\r\n                if (a.name.title.toLowerCase() < b.name.title.toLowerCase()) return 1;\r\n                return 0;\r\n            })\r\n            return [...newItems]\r\n        }\r\n    }\r\n});\r\n\r\nexport const pagination = createSelector(sort, getPage, getUsersOnPage, (items, page, usersOnPage) => {\r\n    if (items) {\r\n        let currentPageUsersFrom = ((page - 1) * usersOnPage);\r\n        let currentPageUsersTo = currentPageUsersFrom + (usersOnPage - 1);\r\n        return items.filter((item, index) => {\r\n            if (index >= currentPageUsersFrom && index <= currentPageUsersTo) return item;\r\n        })\r\n    }\r\n});","export const dateAmericanFormat = (date) => {\r\n    let newDate = new Date(date)\r\n    return newDate.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'numeric',\r\n        day: 'numeric',\r\n        weekday: 'long',\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        second: 'numeric'\r\n    });\r\n}\r\nexport const ageCounter = (date) => {\r\n    return ((new Date().getTime() - new Date(date)) / (24 * 3600 * 365.25 * 1000)) | 0;\r\n}","export const setNationality = (nationLabel) => {\r\n    switch (nationLabel) {\r\n        case 'US':\r\n            return 'American'\r\n            break;\r\n        case 'AU':\r\n            return 'Australian';\r\n            break;\r\n        case 'BR':\r\n            return 'Brazilian';\r\n            break;\r\n        case 'CA':\r\n            return 'Canadian';\r\n            break;\r\n        case 'CH':\r\n            return 'Swiss';\r\n            break;\r\n        case 'DE':\r\n            return 'German';\r\n            break;\r\n        case 'DK':\r\n            return 'Danish';\r\n            break;\r\n        case 'FI':\r\n            return 'Finnish';\r\n            break;\r\n        case 'FR':\r\n            return 'French';\r\n            break;\r\n        case 'GB':\r\n            return 'British';\r\n            break;\r\n        case 'IE':\r\n            return 'Irish';\r\n            break;\r\n        case 'IR':\r\n            return 'Iranian';\r\n            break;\r\n        case 'NO':\r\n            return 'Norwegian';\r\n            break;\r\n        case 'NZ':\r\n            return 'New Zealander';\r\n            break;\r\n        case 'TR':\r\n            return 'Turkish';\r\n            break;\r\n        case 'ES':\r\n            return 'Spanish';\r\n            break;\r\n        case 'NL':\r\n            return 'Dutch';\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n    // return nationalities;\r\n}\r\n","import React, { useState } from 'react';\r\nimport './tableContacts.scss';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport SwapCallsIcon from '@material-ui/icons/SwapCalls';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport { setNationality } from '../../utils/setNationality';\r\n\r\nconst TableContacts = ({ users, setSortBy, sortBy, dateAmericanFormat, ageCounter }) => {\r\n\r\n    const createSortHandler = () => (event) => {\r\n        if (sortBy === 'none') setSortBy('asc');\r\n        if (sortBy === 'asc') setSortBy('dec');\r\n        if (sortBy === 'dec') setSortBy('none');\r\n    };\r\n    const copyToBufer = (content) => {\r\n        navigator.clipboard.writeText(content)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <TableContainer component={Paper} className='table-contacts'>\r\n                <Table className={'table-contacts'} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">Avatar</TableCell>\r\n                            <TableCell align=\"left\"\r\n                            // sortDirection={true}\r\n                            >\r\n                                <TableSortLabel\r\n                                    active={true}\r\n                                    onClick={createSortHandler()}\r\n                                    IconComponent={sortBy === 'none' ? SwapCallsIcon : (sortBy === 'asc' ? ArrowUpwardIcon : ArrowDownwardIcon)}\r\n                                    fontSize=\"large\">\r\n                                    Full name\r\n                                </TableSortLabel>\r\n\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">Birthday</TableCell>\r\n                            <TableCell align=\"left\">Email</TableCell>\r\n                            <TableCell align=\"left\">Phone</TableCell>\r\n                            <TableCell align=\"left\">Location</TableCell>\r\n                            <TableCell align=\"left\">Nationality</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {users.map((item, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell align=\"left\">\r\n                                    <img src={item.picture.thumbnail} alt=\"\" />\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{item.name.title}. {item.name.first} {item.name.last}</TableCell>\r\n                                <TableCell align=\"left\">{dateAmericanFormat(item.dob.date)}, {ageCounter(item.dob.date)} years</TableCell>\r\n                                <TableCell align=\"left\" onClick={() => copyToBufer(item.email)} className='copy-content'>{item.email}</TableCell>\r\n                                <TableCell align=\"left\" onClick={() => copyToBufer(item.cell)} className='copy-content'>{item.cell}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    <b>/{item.location.country}/</b><br />\r\n                                    {item.location.street.number} {item.location.street.name}, {item.location.city}, {item.location.state}, {item.location.postcode}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{setNationality(item.nat)}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment >\r\n    );\r\n};\r\n\r\nexport default TableContacts;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSortBy } from '../../actions/contactsActions';\r\nimport { pagination } from '../../selectors/users-selectors'\r\nimport { dateAmericanFormat, ageCounter } from '../../utils/setDateFormat';\r\nimport TableContacts from './TableContacts';\r\n\r\nconst mapStateToProps = ({ contactsReducer }) => ({\r\n    users: pagination(contactsReducer),\r\n    sortBy: contactsReducer.sortBy,\r\n    dateAmericanFormat: dateAmericanFormat,\r\n    ageCounter: ageCounter\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { setSortBy })(TableContacts);","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport './satistic.scss';\r\n\r\n\r\n\r\n\r\nconst Statistic = ({ countByNation, countByGender }) => {\r\n    return (\r\n        <Grid container className='statistic' >\r\n            <Grid className='statistic__wrapper'\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"flex-start\" >\r\n                <h3>Statistic</h3>\r\n                <Grid className='statistic__count'\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\"\r\n                    spacing={2}>\r\n                    <Grid item>\r\n                        <Grid className='statistic__headerOfCount'>Collection size</Grid>\r\n                        <Grid className='statistic__counter'><span>{countByGender.all}</span></Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item>\r\n                                <Grid className='statistic__headerOfCount'>Males</Grid>\r\n                                <Grid className='statistic__counter'><span>{countByGender.males}</span></Grid>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Grid className='statistic__headerOfCount'>Females</Grid>\r\n                                <Grid className='statistic__counter'><span>{countByGender.females}</span></Grid>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Grid className='statistic__headerOfCount'>Indeterminate</Grid>\r\n                                <Grid className='statistic__counter'><span>{countByGender.indeterminate}</span></Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid className='statistic__predominate'>\r\n                            {countByGender.males > countByGender.females ? <span>Men predominate</span> : <span>Women predominate</span>}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid className='statistic__nationalities'\r\n                    container\r\n                    direction=\"column\">\r\n                    <Grid item>\r\n                        <Grid className='statistic__headerOfCount'>Nationalities</Grid>\r\n                    </Grid>\r\n                    <div className='statistic__nationalities-counters'>\r\n                        {countByNation.zealander > 0 ?\r\n                            <div>\r\n                                <span>New Zealander: </span>\r\n                                <span>{countByNation.zealander} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.swiss > 0 ?\r\n                            <div>\r\n                                <span>Swiss: </span>\r\n                                <span>{countByNation.swiss} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.irish > 0 ?\r\n                            <div>\r\n                                <span>Irish: </span>\r\n                                <span>{countByNation.irish} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.australian > 0 ?\r\n                            <div>\r\n                                <span>Australian: </span>\r\n                                <span>{countByNation.australian} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.canadian > 0 ?\r\n                            <div>\r\n                                <span>Canadian: </span>\r\n                                <span>{countByNation.canadian} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.brazilian > 0 ?\r\n                            <div>\r\n                                <span>Brazilian: </span>\r\n                                <span>{countByNation.brazilian} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.british > 0 ?\r\n                            <div>\r\n                                <span>British: </span>\r\n                                <span>{countByNation.british} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.french > 0 ?\r\n                            <div>\r\n                                <span>French: </span>\r\n                                <span>{countByNation.french} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.german > 0 ?\r\n                            <div>\r\n                                <span>German: </span>\r\n                                <span>{countByNation.german} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.spanish > 0 ?\r\n                            <div>\r\n                                <span>Spanish: </span>\r\n                                <span>{countByNation.spanish} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.dutch > 0 ?\r\n                            <div>\r\n                                <span>Dutch: </span>\r\n                                <span>{countByNation.dutch} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.iranian > 0 ?\r\n                            <div>\r\n                                <span>Iranian: </span>\r\n                                <span>{countByNation.iranian} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.finnish > 0 ?\r\n                            <div>\r\n                                <span>Finnish: </span>\r\n                                <span>{countByNation.finnish} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.norwegian > 0 ?\r\n                            <div>\r\n                                <span>Norwegian: </span>\r\n                                <span>{countByNation.norwegian} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.american > 0 ?\r\n                            <div>\r\n                                <span>American: </span>\r\n                                <span>{countByNation.american} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.danish > 0 ?\r\n                            <div>\r\n                                <span>Danish: </span>\r\n                                <span>{countByNation.danish} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                        {countByNation.turkish > 0 ?\r\n                            <div>\r\n                                <span>Turkish: </span>\r\n                                <span>{countByNation.turkish} contacts</span>\r\n                            </div>\r\n                            : ''}\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Statistic;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setFilterByName, setFilterByGender, setFilterByNationality, clearAllFilters } from '../../actions/contactsActions';\r\nimport { filterByNationalitySelector } from '../../selectors/users-selectors';\r\nimport Statistic from './Statistic';\r\n\r\nconst countByNation = (users) => {\r\n    const nationalities = {\r\n        american: 0,\r\n        australian: 0,\r\n        brazilian: 0,\r\n        canadian: 0,\r\n        swiss: 0,\r\n        german: 0,\r\n        danish: 0,\r\n        spanish: 0,\r\n        finnish: 0,\r\n        french: 0,\r\n        british: 0,\r\n        irish: 0,\r\n        iranian: 0,\r\n        norwegian: 0,\r\n        zealander: 0,\r\n        turkish: 0,\r\n        dutch: 0\r\n    }\r\n    users.forEach((item) => {\r\n        switch (item.nat) {\r\n            case 'US':\r\n                nationalities.american += 1;\r\n                break;\r\n            case 'AU':\r\n                nationalities.australian += 1;\r\n                break;\r\n            case 'BR':\r\n                nationalities.brazilian += 1;\r\n                break;\r\n            case 'CA':\r\n                nationalities.canadian += 1;\r\n                break;\r\n            case 'CH':\r\n                nationalities.swiss += 1;\r\n                break;\r\n            case 'DE':\r\n                nationalities.german += 1;\r\n                break;\r\n            case 'DK':\r\n                nationalities.danish += 1;\r\n                break;\r\n            case 'FI':\r\n                nationalities.finnish += 1;\r\n                break;\r\n            case 'FR':\r\n                nationalities.french += 1;\r\n                break;\r\n            case 'GB':\r\n                nationalities.british += 1;\r\n                break;\r\n            case 'IE':\r\n                nationalities.irish += 1;\r\n                break;\r\n            case 'IR':\r\n                nationalities.iranian += 1;\r\n                break;\r\n            case 'NO':\r\n                nationalities.norwegian += 1;\r\n                break;\r\n            case 'NZ':\r\n                nationalities.zealander += 1;\r\n                break;\r\n            case 'TR':\r\n                nationalities.turkish += 1;\r\n                break;\r\n            case 'ES':\r\n                nationalities.spanish += 1;\r\n                break;\r\n            case 'NL':\r\n                nationalities.dutch += 1;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n    return nationalities;\r\n}\r\nconst countByGender = (users) => {\r\n    const nationalities = {\r\n        all: users.length,\r\n        males: 0,\r\n        females: 0,\r\n        indeterminate: 0,\r\n    }\r\n    users.forEach((item) => {\r\n        switch (item.gender) {\r\n            case \"male\":\r\n                nationalities.males += 1;\r\n                break;\r\n            case \"female\":\r\n                nationalities.females += 1;\r\n                break;\r\n            case 'indeterminate':\r\n                nationalities.indeterminate += 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n    return nationalities;\r\n}\r\n\r\nconst mapStateToProps = ({ contactsReducer }) => ({\r\n    filterByName: contactsReducer.filterByName,\r\n    gender: contactsReducer.filterByGender,\r\n    nationality: contactsReducer.filterByNationality,\r\n    countByNation: countByNation(filterByNationalitySelector(contactsReducer)),\r\n    countByGender: countByGender(filterByNationalitySelector(contactsReducer))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { setFilterByName, setFilterByGender, setFilterByNationality, clearAllFilters })(Statistic);","import React from 'react';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Paginator = ({ usersCount, page, setPage, usersOnPage }) => {\r\n    let pageCount = Math.ceil(usersCount / usersOnPage)\r\n\r\n    const handleChange = (e, page) => {\r\n        setPage(page)\r\n    }\r\n    return (\r\n        <Grid container justify=\"flex-end\">\r\n            <Pagination count={pageCount} page={page} onChange={handleChange} />\r\n        </Grid>\r\n\r\n    );\r\n};\r\n\r\nexport default Paginator;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setPage } from '../../actions/contactsActions';\r\nimport { filterByNationalitySelector } from '../../selectors/users-selectors'\r\nimport Paginator from './Paginator';\r\n\r\n\r\n\r\nconst mapStateToProps = ({ contactsReducer }) => ({\r\n    usersCount: filterByNationalitySelector(contactsReducer).length,\r\n    page: contactsReducer.page,\r\n    usersOnPage: contactsReducer.usersOnPage\r\n})\r\n\r\nexport default connect(mapStateToProps, { setPage })(Paginator);","import React, { useState } from 'react';\r\nimport { Grid, TextField, FormControl, Select, InputLabel, Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport './searchAndFilter.scss';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nconst countries = [\r\n    { name: 'American', value: 'US' },\r\n    { name: 'Australian', value: 'AU' },\r\n    { name: 'Brazilian', value: 'BR' },\r\n    { name: 'Canadian', value: 'CA' },\r\n    { name: 'Swiss', value: 'CH' },\r\n    { name: 'German', value: 'DE' },\r\n    { name: 'Danish', value: 'DK' },\r\n    { name: 'Spanish', value: 'ES' },\r\n    { name: 'Finnish', value: 'FI' },\r\n    { name: 'French', value: 'FR' },\r\n    { name: 'British', value: 'GB' },\r\n    { name: 'Irish', value: 'IE' },\r\n    { name: 'Iranian', value: 'IR' },\r\n    { name: 'Norwegian', value: 'NO' },\r\n    { name: 'New Zealander', value: 'NZ' },\r\n    { name: 'Turkish', value: 'TR' },\r\n    { name: 'Dutch', value: 'NL' }\r\n];\r\n\r\nconst SearchAndFilter = ({ setFilterByName, filterByName, setFilterByGender, setFilterByNationality, gender, nationality, clearAllFilters, setPage }) => {\r\n\r\n    const handleChangeInput = (e) => {\r\n        setFilterByName(e.target.value)\r\n    }\r\n    const handleChangeGender = (e) => {\r\n        setFilterByGender(e.target.value)\r\n        resetPage();\r\n    }\r\n    const handleChangeNationality = (e, value) => {\r\n        setFilterByNationality(value)\r\n        resetPage();\r\n    }\r\n    const handleClearFilters = () => {\r\n        clearAllFilters();\r\n        resetPage();\r\n    }\r\n    const resetPage = () => {\r\n        setPage(1)\r\n    }\r\n    return (\r\n        <Grid container className='search__wrapper' >\r\n            <Grid className='search'\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\" >\r\n                <Grid\r\n                    className='search__form'\r\n                    container\r\n                    item\r\n                    md={11}\r\n                    xs={12}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    spacing={2}>\r\n                    <Grid item xs className='search__fullName_wrapper' md={5} sm={12} xs={12}>\r\n                        <TextField id=\"outlined-basic\" label=\"Search by full name\" variant=\"outlined\" className='search__fullName' size=\"small\"\r\n                            value={filterByName} onChange={handleChangeInput} />\r\n                        {/* <input type=\"text\" placeholder='Search by full name' /> */}\r\n                    </Grid>\r\n                    <Grid item xs className='search__gender_wrapper' md={2} sm={6} xs={12}>\r\n                        <FormControl variant=\"outlined\" className='search__gender' size=\"small\">\r\n                            <InputLabel htmlFor=\"outlined-age-native-simple\">Gender</InputLabel>\r\n                            <Select\r\n                                native\r\n                                value={gender}\r\n                                onChange={handleChangeGender}\r\n                                label=\"Gender\">\r\n                                <option aria-label=\"None\" value=\"\" />\r\n                                <option value={'Male'}>Male</option>\r\n                                <option value={'Female'}>Female</option>\r\n                                <option value={'Indeterminate'}>Indeterminate</option>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs className='search__nationality_wrapper' md={3} sm={6} xs={12}>\r\n                        <Autocomplete\r\n                            value={nationality}\r\n                            onChange={handleChangeNationality}\r\n                            size=\"small\"\r\n                            multiple\r\n                            id=\"checkboxes-nationality\"\r\n                            options={countries}\r\n                            disableCloseOnSelect\r\n                            getOptionLabel={(option) => option.name}\r\n                            renderOption={(option, { selected }) => (\r\n                                <React.Fragment>\r\n                                    <Checkbox\r\n                                        icon={icon}\r\n                                        checkedIcon={checkedIcon}\r\n                                        style={{ marginRight: 8 }}\r\n                                        checked={selected}\r\n                                    />\r\n                                    {option.name}\r\n                                </React.Fragment>\r\n                            )}\r\n                            renderInput={(params) => (\r\n                                <TextField {...params} variant=\"outlined\" label=\"Nationality\" />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    {/* <Grid item xs className='search__checkBox_wrapper' md={2} sm={12} xs={12}>\r\n                        <FormControlLabel className='search__checkBox'\r\n                            control={\r\n                                <Checkbox\r\n                                    // checked={state.checkedB}\r\n                                    // onChange={handleChange}\r\n                                    name=\"checkedB\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"I am creator\"\r\n                        />\r\n                    </Grid> */}\r\n                </Grid>\r\n                <Grid item\r\n                    container\r\n                    md={1} xs={12}\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\">\r\n                    <button className='clear_button' onClick={handleClearFilters} disabled={filterByName === '' && gender === '' && nationality.length === 0 ? true : false}>\r\n                        <svg viewBox=\"64 64 896 896\" focusable=\"false\" className=\"\" data-icon=\"close\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z\"></path></svg>\r\n                            Clear\r\n                        </button>\r\n                </Grid>\r\n            </Grid >\r\n        </Grid >\r\n    );\r\n};\r\n\r\nexport default SearchAndFilter;","import { connect } from 'react-redux';\r\nimport { setFilterByName, setFilterByGender, setFilterByNationality, clearAllFilters, setPage } from '../../actions/contactsActions';\r\nimport SearchAndFilter from './SearchAndFilter';\r\n\r\n\r\nconst mapStateToProps = ({ contactsReducer }) => ({\r\n    filterByName: contactsReducer.filterByName,\r\n    gender: contactsReducer.filterByGender,\r\n    nationality: contactsReducer.filterByNationality,\r\n    users: contactsReducer.users\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { setFilterByName, setFilterByGender, setFilterByNationality, clearAllFilters, setPage })(SearchAndFilter);","import React, { useState } from 'react';\r\nimport './tiledContacts.scss';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { setNationality } from '../../utils/setNationality';\r\n\r\nconst TiledContacts = ({ users, ageCounter }) => {\r\n\r\n    const copyToBufer = (content) => {\r\n        navigator.clipboard.writeText(content)\r\n    }\r\n\r\n    return (\r\n        <div className='tiled-contacts'>\r\n            {users.map((item, index) => (\r\n\r\n                <Card className='tiled-contacts__card' key={index}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            className='tiled-contacts__media'\r\n                            image={item.picture.large}\r\n                            title=\"photo\" />\r\n                        <CardContent className='tiled-contacts__content'>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                {item.name.title}. {item.name.first} {item.name.last}, <small>({ageCounter(item.dob.date)} years)</small>\r\n                            </Typography>\r\n                            <Divider />\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" onClick={() => copyToBufer(item.email)} className='copy-content'>{item.email}</Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" onClick={() => copyToBufer(item.cell)} className='copy-content'>{item.cell}</Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                <b>/{item.location.country}/</b><br />\r\n                                {item.location.street.number} {item.location.street.name}, {item.location.city}, {item.location.state}, {item.location.postcode}\r\n                            </Typography>\r\n                            <Divider variant=\"middle\" />\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{setNationality(item.nat)}</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n\r\n                </Card>\r\n            ))\r\n            }\r\n\r\n            {/* <TableContainer component={Paper} className='table-contacts'>\r\n                <Table className={'table-contacts'} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">Avatar</TableCell>\r\n                            <TableCell align=\"left\"\r\n                            // sortDirection={true}\r\n                            >\r\n                                <TableSortLabel\r\n                                    active={true}\r\n                                    onClick={createSortHandler()}\r\n                                    IconComponent={sortBy === 'none' ? SwapCallsIcon : (sortBy === 'asc' ? ArrowUpwardIcon : ArrowDownwardIcon)}\r\n                                    fontSize=\"large\">\r\n                                    Full name\r\n                                </TableSortLabel>\r\n\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">Birthday</TableCell>\r\n                            <TableCell align=\"left\">Email</TableCell>\r\n                            <TableCell align=\"left\">Phone</TableCell>\r\n                            <TableCell align=\"left\">Location</TableCell>\r\n                            <TableCell align=\"left\">Nationality</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {users.map((item, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell align=\"left\">\r\n                                    <img src={item.picture.thumbnail} alt=\"\" />\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{item.name.title}. {item.name.first} {item.name.last}</TableCell>\r\n                                <TableCell align=\"left\">{item.dob.date}</TableCell>\r\n                                <TableCell align=\"left\" onClick={() => copyToBufer(item.email)} className='copy-content'>{item.email}</TableCell>\r\n                                <TableCell align=\"left\" onClick={() => copyToBufer(item.cell)} className='copy-content'>{item.cell}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    <b>/{item.location.country}/</b><br />\r\n                                    {item.location.street.number} {item.location.street.name}, {item.location.city}, {item.location.state}, {item.location.postcode}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{setNationality(item.nat)}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer> */}\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default TiledContacts;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setViewMode } from '../../actions/contactsActions';\r\nimport { pagination } from '../../selectors/users-selectors'\r\nimport TiledContacts from './TiledContacts';\r\nimport { ageCounter } from '../../utils/setDateFormat';\r\n\r\nconst mapStateToProps = ({ contactsReducer }) => ({\r\n    users: pagination(contactsReducer),\r\n    viewMode: contactsReducer.viewMode,\r\n    ageCounter: ageCounter\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { setViewMode })(TiledContacts);","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './preloader.scss';\r\n\r\nconst Preloader = () => {\r\n\r\n    return (\r\n        <Grid className='preloader'\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            <Grid>\r\n                <CircularProgress />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport { Grid, Button, ButtonGroup } from '@material-ui/core';\r\nimport './contacts.scss';\r\nimport TableContactsContainer from '../../components/tableContacts/TableContactsContainer';\r\nimport StatisticContainer from '../../components/statistic/StatisticContainer';\r\nimport PaginatiorContainer from '../../components/paginator/PaginatorContainer';\r\nimport SearchAndFilterContainer from '../../components/searchAndFilter/SearchAndFilterContainer';\r\nimport TiledContactsContainer from '../../components/tiledContacts/TiledContactsContainer';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport Preloader from '../../components/preloader/Preloader';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\n\r\nconst Contacts = ({ setAndSaveViewMode, viewMode, setUsersOnPage, setPage, isUpdating, getAllUsers }) => {\r\n\r\n    const handleChangeViewMode = (e) => {\r\n        if (e.currentTarget.classList.contains(\"active\")) return;\r\n        if (viewMode === 'table') {\r\n            setAndSaveViewMode('tiled');\r\n            setUsersOnPage(6);\r\n        }\r\n        if (viewMode === 'tiled') {\r\n            setAndSaveViewMode('table');\r\n            setUsersOnPage(10)\r\n        }\r\n        setPage(1)\r\n    }\r\n    const handleUpdate = () => {\r\n        getAllUsers()\r\n    }\r\n    return (\r\n        <Grid container className='contacts'>\r\n            <Grid className='contacts__head'\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\">\r\n                <Grid>\r\n                    <h3>Contacts</h3>\r\n                </Grid>\r\n                <Grid className='contacts__button'\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\">\r\n                    <Button className={`update ${isUpdating ? 'spin' : ''}`} onClick={handleUpdate}><ReplayIcon /></Button>\r\n                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                        <Button className={viewMode === 'tiled' ? 'active' : ''} onClick={handleChangeViewMode}><ViewModuleIcon /></Button>\r\n                        <Button className={viewMode === 'table' ? 'active' : ''} onClick={handleChangeViewMode}><ListIcon /></Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n            <SearchAndFilterContainer />\r\n            {isUpdating === false ?\r\n                <React.Fragment>\r\n                    {viewMode === 'table'\r\n                        ? <TableContactsContainer />\r\n                        : <TiledContactsContainer />\r\n                    }\r\n                    <StatisticContainer />\r\n                    <PaginatiorContainer />\r\n                </React.Fragment>\r\n                :\r\n                <Preloader />\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Contacts;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllUsers, setAndSaveViewMode, setUsersOnPage, setPage } from '../../actions/contactsActions';\r\nimport { pagination } from '../../selectors/users-selectors';\r\nimport Contacts from './Contacts';\r\n\r\nconst ContactsContainer = ({ users, getAllUsers, viewMode, setAndSaveViewMode, setUsersOnPage, setPage, isUpdating }) => {\r\n    useEffect(() => {\r\n        getAllUsers();\r\n    }, []);\r\n\r\n    return (\r\n        <Contacts users={users} viewMode={viewMode} setAndSaveViewMode={setAndSaveViewMode} setUsersOnPage={setUsersOnPage}\r\n            setPage={setPage} getAllUsers={getAllUsers} isUpdating={isUpdating} />\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ contactsReducer }) => ({\r\n    users: pagination(contactsReducer),\r\n    viewMode: contactsReducer.viewMode,\r\n    isUpdating: contactsReducer.isUpdating\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { getAllUsers, setAndSaveViewMode, setUsersOnPage, setPage })(ContactsContainer);","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport logo from '../../assets/images/react-logo.svg'\r\nimport './home.scss';\r\n\r\nconst Home = () => {\r\n\r\n    return (\r\n        <Grid className='home'\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            <Grid>\r\n                <img src={logo} alt=\"\" />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Home;","import './footer.scss';\r\nimport React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <Grid className='footer'\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            <p>2020 © Wezom React-Redux Test</p>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Header from './components/header/Header';\nimport ContactsContainer from './pages/contacts/ContactsContainer';\nimport Home from './pages/home/Home';\nimport Footer from './components/footer/Footer';\n\nconst App = () => {\n  return (\n    <div className='app'>\n      <div className='app__content'>\n        <Header />\n        <Switch>\n          <Route exact path='/contacts' render={() => (< ContactsContainer />)} />\n          <Route exact path='/' render={() => (<Home />)} />\n        </Switch>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport {\r\n    SET_USERS, SET_FILTER_BY_NAME, SET_FILTER_BY_GENDER, SET_FILTER_BY_NATIONALITY, SET_PAGE, SET_USERS_ON_PAGE,\r\n    SET_SORT_BY, CLEAR_ALL_FILTER, SET_VIEW_MODE, IS_UPDATING\r\n} from '../actions/contactsActions';\r\n\r\n// const SET_USERS = 'SET_USERS';\r\n// const SET_FILTER_BY_NAME = 'SET_FILTER_BY_NAME';\r\n// const SET_FILTER_BY_GENDER = 'SET_FILTER_BY_GENDER';\r\n// const SET_FILTER_BY_NATIONALITY = 'SET_FILTER_BY_NATIONALITY';\r\n// const SET_PAGE = 'SET_PAGE';\r\n// const SET_USERS_ON_PAGE = 'SET_USERS_ON_PAGE';\r\n// const SET_SORT_BY = 'SET_SORT_BY';\r\n// const CLEAR_ALL_FILTER = 'CLEAR_ALL_FILTER';\r\n// const SET_VIEW_MODE = 'SET_VIEW_MODE';\r\n// const IS_UPDATING = 'IS_UPDATING';\r\n\r\nlet initialState = {\r\n    users: null,\r\n    filterByName: '',\r\n    filterByGender: '',\r\n    filterByNationality: [],\r\n    page: 1,\r\n    usersOnPage: 10,\r\n    sortBy: 'none',\r\n    viewMode: 'table',\r\n    isUpdating: true\r\n};\r\n\r\nconst contactsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_VIEW_MODE:\r\n            return {\r\n                ...state,\r\n                viewMode: action.viewMode\r\n            }\r\n        case CLEAR_ALL_FILTER:\r\n            return {\r\n                ...state,\r\n                filterByName: '',\r\n                filterByGender: '',\r\n                filterByNationality: []\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_FILTER_BY_NAME:\r\n            return {\r\n                ...state,\r\n                filterByName: action.text\r\n            }\r\n        case SET_FILTER_BY_GENDER:\r\n            return {\r\n                ...state,\r\n                filterByGender: action.text\r\n            }\r\n        case SET_FILTER_BY_NATIONALITY:\r\n            return {\r\n                ...state,\r\n                filterByNationality: action.arrOfNationalities\r\n            }\r\n        case SET_SORT_BY:\r\n            return {\r\n                ...state,\r\n                sortBy: action.sortBy\r\n            }\r\n        case SET_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n        case SET_USERS_ON_PAGE:\r\n            return {\r\n                ...state,\r\n                usersOnPage: action.usersOnPage\r\n            }\r\n        case IS_UPDATING:\r\n            return {\r\n                ...state,\r\n                isUpdating: action.isUpdating\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n}\r\n\r\n// export const setUsers = (users) => ({ type: SET_USERS, users });\r\n// export const setFilterByName = (text) => ({ type: SET_FILTER_BY_NAME, text });\r\n// export const setFilterByGender = (text) => ({ type: SET_FILTER_BY_GENDER, text });\r\n// export const setFilterByNationality = (arrOfNationalities) => ({ type: SET_FILTER_BY_NATIONALITY, arrOfNationalities });\r\n// export const setSortBy = (sortBy) => ({ type: SET_SORT_BY, sortBy });\r\n// export const setPage = (page) => ({ type: SET_PAGE, page });\r\n// export const setUsersOnPage = (usersOnPage) => ({ type: SET_USERS_ON_PAGE, usersOnPage });\r\n// export const clearAllFilters = () => ({ type: CLEAR_ALL_FILTER });\r\n// export const setViewMode = (viewMode) => ({ type: SET_VIEW_MODE, viewMode });\r\n// export const setIsUpdating = (isUpdating) => ({ type: IS_UPDATING, isUpdating });\r\n\r\n// export const getAllUsers = () => async (dispatch) => {\r\n//     try {\r\n//         dispatch(setIsUpdating(true))\r\n//         dispatch(getViewMode());\r\n//         let randomNumber = sessionStorage.getItem('usersCount');\r\n//         if (!randomNumber) {\r\n//             randomNumber = Math.floor(Math.random() * (1001 - 50) + 50);\r\n//             sessionStorage.setItem('usersCount', randomNumber);\r\n//         }\r\n//         let response = await contactsApi.getMultipleUsers(randomNumber);\r\n\r\n//         if (response.status === 200) {\r\n//             dispatch(setUsers(response.data.results));\r\n//             dispatch(setIsUpdating(false))\r\n//         }\r\n//         else throw (new Error())\r\n\r\n//     } catch (err) {\r\n//         console.error(\"Ошибка: \" + err);\r\n//     }\r\n// };\r\n\r\n// export const setAndSaveViewMode = (viewMode) => async (dispatch) => {\r\n//     dispatch(setViewMode(viewMode))\r\n//     localStorage.setItem('viewMode', viewMode);\r\n// };\r\n\r\n// const getViewMode = () => async (dispatch) => {\r\n\r\n//     let viewMode = localStorage.getItem('viewMode');\r\n//     if (!viewMode) {\r\n//         viewMode = 'table'\r\n//         localStorage.setItem('viewMode', viewMode);\r\n//     }\r\n//     dispatch(setViewMode(viewMode))\r\n// };\r\nexport default contactsReducer;","import { combineReducers } from 'redux';\r\nimport contactsReducer from './contactsReducer';\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    contactsReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\n\r\nimport rootReducer from './reducers';\r\nimport thunkMiddlewear from 'redux-thunk';\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddlewear));\r\nwindow.store = store;\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wezom-logo.324b96ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/react-logo.ee7cd8ed.svg\";"],"sourceRoot":""}